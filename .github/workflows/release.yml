name: Build & Release (sandtimer)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      EXE_NAME: SandGlassTimer.exe
      OUT_DIR: out

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.3'
          host: 'windows'
          arch: 'win64_msvc2019_64'
          cache: true
          modules: 'qtmultimedia'

      - name: Configure (CMake)
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

      - name: Build (CMake)
        run: cmake --build build --config Release --parallel

      # 用 windeployqt 收集到 OUT_DIR
      - name: Deploy Qt runtime (windeployqt)
        shell: pwsh
        run: |
          $exePath = Resolve-Path "build/Release/${env:EXE_NAME}"
          if (Test-Path $env:OUT_DIR) { Remove-Item -Recurse -Force $env:OUT_DIR }
          New-Item -ItemType Directory -Path $env:OUT_DIR | Out-Null
          & windeployqt `
            --release `
            --no-translations `
            --compiler-runtime `
            --multimedia `
            --dir "$env:OUT_DIR" `
            $exePath
          # ！！把 EXE 本体拷到 OUT_DIR
          Copy-Item $exePath "$env:OUT_DIR/"

      # 补充资源与许可证
      - name: Copy assets & licenses
        shell: pwsh
        run: |
          if (Test-Path "assets") {
            Copy-Item "assets" "$env:OUT_DIR/assets" -Recurse -Force
          }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "$env:OUT_DIR/" }
          if (Test-Path "third_party_notices") {
            Copy-Item "third_party_notices" "$env:OUT_DIR/third_party_notices" -Recurse -Force
          }

      # 列出 OUT_DIR 内容（便于排查）
      - name: List OUT_DIR
        shell: pwsh
        run: |
          Write-Host "=== OUT_DIR tree ==="
          Get-ChildItem "$env:OUT_DIR" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize

      # 基本自检
      - name: Sanity check
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:OUT_DIR/${env:EXE_NAME}")) { throw "exe missing" }
          if (-not (Test-Path "$env:OUT_DIR/platforms/qwindows.dll")) { throw "platform plugin missing" }
          if (-not (Test-Path "$env:OUT_DIR/audio/qaudio_wasapi.dll")) { throw "audio plugin missing" }
          if (-not (Test-Path "$env:OUT_DIR/multimedia/ffmpegmediaplugin.dll")) { throw "multimedia plugin missing" }

      - name: Package zip
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $zip = "sandtimer-win64-$tag.zip"
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path "$env:OUT_DIR\*" -DestinationPath $zip -Force
          echo "ASSET_NAME=$zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
