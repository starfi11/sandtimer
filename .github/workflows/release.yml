name: Build & Release (sandtimer)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      EXE_NAME: SandGlassTimer.exe
      OUT_DIR: out

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.3'
          host: 'windows'
          arch: 'win64_msvc2019_64'
          cache: true
          modules: 'qtmultimedia'

      - name: Configure (CMake)
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

      - name: Build (CMake)
        run: cmake --build build --config Release --parallel

      # 用 windeployqt 收集到 OUT_DIR
      - name: Deploy Qt runtime (windeployqt)
        shell: pwsh
        run: |
          $exePath = Resolve-Path "build/Release/${env:EXE_NAME}"
          if (Test-Path $env:OUT_DIR) { Remove-Item -Recurse -Force $env:OUT_DIR }
          New-Item -ItemType Directory -Path $env:OUT_DIR | Out-Null
          & windeployqt `
            --release `
            --no-translations `
            --compiler-runtime `
            --multimedia `
            --dir "$env:OUT_DIR" `
            $exePath
          # ！！把 EXE 本体拷到 OUT_DIR
          Copy-Item $exePath "$env:OUT_DIR/"

      # 补充资源与许可证
      - name: Copy assets & licenses
        shell: pwsh
        run: |
          if (Test-Path "assets") {
            Copy-Item "assets" "$env:OUT_DIR/assets" -Recurse -Force
          }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "$env:OUT_DIR/" }
          if (Test-Path "third_party_notices") {
            Copy-Item "third_party_notices" "$env:OUT_DIR/third_party_notices" -Recurse -Force
          }

      # 列出 OUT_DIR 内容（便于排查）
      - name: List OUT_DIR
        shell: pwsh
        run: |
          Write-Host "=== OUT_DIR tree ==="
          Get-ChildItem "$env:OUT_DIR" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          Write-Host "=== audio/ and multimedia/ ==="
          if (Test-Path "$env:OUT_DIR/audio") { Get-ChildItem "$env:OUT_DIR/audio" | Format-Table -AutoSize }
          if (Test-Path "$env:OUT_DIR/multimedia") { Get-ChildItem "$env:OUT_DIR/multimedia" | Format-Table -AutoSize }

      # 基本自检（宽松判断：存在其一即可）
      - name: Sanity check
        shell: pwsh
        run: |
          $exe = Join-Path $env:OUT_DIR $env:EXE_NAME
          if (-not (Test-Path $exe)) { throw "exe missing: $exe" }

          $platformOk = Test-Path (Join-Path $env:OUT_DIR "platforms/qwindows.dll")
          if (-not $platformOk) { throw "platform plugin missing: platforms/qwindows.dll" }

          # Qt 6 常见音频后端：qtaudio_wasapi.dll（注意是 qtaudio_ 前缀）
          $audioOk = Test-Path (Join-Path $env:OUT_DIR "audio/qtaudio_wasapi.dll")
          if (-not $audioOk) {
            # 个别打包/版本可能叫法不同，这里兜底再查一次（历史上有人写成 qaudio_wasapi.dll）
            $audioOk = Test-Path (Join-Path $env:OUT_DIR "audio/qaudio_wasapi.dll")
          }
          if (-not $audioOk) { throw "audio plugin missing (expected one of: audio/qtaudio_wasapi.dll, audio/qaudio_wasapi.dll)" }

          # 多媒体后端：ffmpeg 或 Windows Media Foundation，存在其一即可
          $ffmpeg = Test-Path (Join-Path $env:OUT_DIR "multimedia/ffmpegmediaplugin.dll")
          $wmf    = Test-Path (Join-Path $env:OUT_DIR "multimedia/windowsmediaplugin.dll")
          if (-not ($ffmpeg -or $wmf)) {
            throw "multimedia plugin missing (expected one of: multimedia/ffmpegmediaplugin.dll, multimedia/windowsmediaplugin.dll)"
          }

      - name: Package zip
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $zip = "sandtimer-win64-$tag.zip"
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path "$env:OUT_DIR\*" -DestinationPath $zip -Force
          echo "ASSET_NAME=$zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
